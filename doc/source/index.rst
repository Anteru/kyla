Welcome to Kyla's documentation!
================================

**Kyla** is a fast, minimal installation framework designed to simplify the deployment of very large applications, consisting of tens of thousands of files, including very large files. Performance is critical in such scenarios, and **Kyla** is designed for good performance. Source package files are only read sequentially and can be easily streamed off-the-web. Decompression, validation and output is interleaved to ensure that data is touched only once. All data generated by **Kyla** can be validated before, during and after the installation to detect damaged installation packages or failures during the installation.

Contents:

.. toctree::
    :maxdepth: 2

    installer-file-format
    todo

Project goals
=============

* Support for installation packages with 100.000 and more files. For instance, installing Boost or Qt should be possible.
* Support for files larger than 4 GiB.
* End-to-end validation of all files (checksums from creation to deployment and automatic repair.)
* Duplicated files are automatically de-duplicated.
* Compressed installation media with precise media sizes. Large files are automatically split across multiple packages if needed.
* Optional end-to-end encryption (through user-specified callback or built-in machinery)
* The installer should overlap download, decompression and decryption to minimize setup time.
* Installation scripting via Lua (enabling/disabling features)
* Provide a simple, C installation library and build UI on top. Clients should be able to easily integrate the installer into a custom UX.
* Simple installer creation from an existing file/folder structure.

Non-goals
=========

* No driver installation, service installation or other Windows-specific features covered by MSI already
* No installer chaining (i.e. no MSM merge modules or "`Burn <http://wixtoolset.org/documentation/manual/v3/howtos/redistributables_and_install_checks/install_dotnet.html>`_") -- though possible by build on top of the client library
* No support for individual patch installation/deinstallation, application can only move forward in version numbers
* No built-in UI (as is provided by MSI)

Post 1.0 goals
==============

* Usage of `BITS <http://en.wikipedia.org/wiki/Background_Intelligent_Transfer_Service>`_
* Custom server side software
* Patch creation
* Linux/Mac OS X support

Terms
=====

The following terms are used throughout the documentation:

Installation package
  The installer base file, at least containing an installation database, and optionally containing several embedded source packages.

Source package
  A compressed file containing content objects. Content objects may be split across multiple source packages. A source package can be *embedded*, in which case it is added to the installation package.

Content object
  Opaque data associated with one or more files. This is the actual payload installed by the installer. A content object is identified by it's content, that is, its SHA512 hash.

Installation source
  Either a URL or a directory, containing *source packages*.

Installation database
  A database describing the installation package (source packages, files, etc.) This is always stored in an installation package.

Deployment database
  Stores all installed files and their content hashes. The deployment database is created during the installation and can be used to validate and repair an installation, as well as uninstalling.

Installation target
  A folder on the target machine. The target is assumed to be read-only after the installation.

Layout mode
  Similar to MSI, the layout mode will create a local installation package from a web installation source

Design
======

The basic design revolves around a hash-addressed content store. That is, all files are references into this content store. A file consists of exactly one hash, but the same hash can be referenced by multiple files. The installer ensures that the target directory contains the file layout described in the package definition and that each file points at the correct hash.

The installer fetches the data from the installation source, which consists of multiple source packages. Each source package can be processed independently. For each file selected for installation, all source packages are fetched, and each SHA-index data is extracted to a temporary location. Extraction and verification happen concurrently with downloading, if possible. Eventually, the data is moved to the target location (if multiple files reference the same SHA-index, it is copied or symlink'ed, depending on the OS.) Additionally, the installer creates a installation database which stores which SHA hashes have been installed to which file (this allows to patch and repair an installation later, assuming the original package definition is available.)

Installation
------------

The installation consists of the following steps:

#. User selects which features to install
#. The files associated with the features are identified
#. The required content objects are identified
#. The source packages which contain the required content objects are identified
#. All source packages are processed. A source package can be streamed, and each content object can be decompressed/validated/reassembled in parallel.
#. Each content object is checked whether it is in the list of requested content objects, if so, it is decompressed to the *staging directory*. Content objects have unique file names (their hash), so no collisions can occur here.
#. The installation database is generated in memory.
#. The file list is traversed and content objects are moved to the *target directory*.
#. The installation database is stored persistently.

If the user aborts the installation, the installation database is queried to undo the operations so far. If the installation is aborted before the installation database has been created, it is enough to delete the *staging directory*.

Source package
--------------

A source package consists of two parts: The package index and the data. The package index is simply a list of (SHA512, offset) to each entry in the package. The data is a list of (Header, Compressed-Data) chunks.

API
---

The install engine can be accessed using a C API. An installation must specify which features should be installed. Additional options like the installation directory are passed using properties. At least the following properties must be set:

* ``TargetDirectory``: A string property which specifies the target directory.

Optionally, the following properties can be set:

* ``StagingDirectory``: The staging directory. This directory will be used while the installation is prepared. It should be placed on the same drive/partition as the ``TargetDirectory``.
* ``SourcePackageDirectory``: The path to the source packages.
