.. _repository-description:

Repository build description
============================

Installer repositories are compiled by using ``kcl build``. This requires an Xml file that describes how to build a file repository. Here's an example repository file:

.. code-block:: xml

    <?xml version="1.0" ?>
    <FileRepository>
    	<Package>
    		<Type>Packed</Type>
    	</Package>
    	<FileSets>
    		<FileSet Id="5d195f63-f424-431f-b7c5-8d57cd32f57b" Name="CoreApplication">
    			<File Source="application.exe" />
    		</FileSet>
    		<FileSet Id="c8bed51b-cbba-4699-953a-834930704d89" Name="Plugins">
    			<File Source="plugin1.dll" />
        		<File Source="plugin2.dll" />
    		</FileSet>
    	</FileSets>
    </FileRepository>

Reference
---------

* ``FileRepository`` is the root node and must be present in every repository definition.
* ``Package`` within ``FileRepository`` provides meta-information about the package. It may contain two elements:

  * ``Type`` to specify the package type. ``Packed`` and ``Loose`` are valid options.
  * ``ChunkSize`` if the package type is ``Packed``. This determines the chunk size at which objects are stored (specified in bytes). The default size is 4 MiB.

* ``FileSets`` describes all file sets stored in this package.

  * ``FileSet`` describes the files stored within a file set. The file sets must be disjoint - that means every file path must be unique inside the repository, and must be only assigned to one file set. Each file set id must be unique within one file repository.

    A file set must contain an ``Id`` attribute which must be a valid Uuid. The id is used during the installation to uniquely identify a file set.

    A file set must contain one or more ``File`` elements. A ``File`` element must have the ``Source`` attribute set and it must point to an existing file. Optionally, the ``Target`` attribute can be specified to store a file at a different location. If no ``Target`` is present, the default is to use the ``Source`` path.

    A file set may contain an optional ``SourcePackageId`` attribute which references a source package defined in this repository definition. More on this below.

There's also a couple of optional elements:

* ``SourcePackages`` within ``FileRepository``. This can be used only for ``Packed`` repository. In this case, file sets can be assigned to source packages as following:

  .. code-block:: xml

    <SourcePackages>
      <SourcePackage Name="binaries" Id="BinariesPackage">
      <SourcePackage Name="plugins" Id="PluginsPackage">
    </SourcePackages>
    <FileSet SourcePackageId="BinariesPackage" Id="5d195f63-f424-431f-b7c5-8d57cd32f57b" Name="CoreApplication">
      <!-- as above -->
    </FileSet>
    <FileSet SourcePackageId="PluginsPackage" Id="c8bed51b-cbba-4699-953a-834930704d89" Name="Plugins">
      <!-- as above -->
    </FileSet>

  In this case, all files from one file set will end up in a single package. If no source packages are defined, or no package is assigned to a file set, they will be put into the ``main`` package. The ``main`` package will be autogenerated if it's not present in the list of packages.

  A ``SourcePackage`` must contain the following attributes:

  * ``Name`` - a valid file name which will be used for the package file
  * ``Id`` - a unique id within the repository. This is referenced from a file set using ``SourcePackageId``

  Optionally, all content objects in a source package can be compressed. The compression algorithm can be set using the optional ``Compression`` attribute. Valid compression algorithms are: ``Uncompressed``, ``Zip``.

  .. note::

      If two files with the same contents are in separate file sets and separate source packages, the contents of the files will be duplicated.
